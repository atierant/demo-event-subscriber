language: php
sudo: true

cache:
  yarn: true
  directories:
    # Cache composer packages so "composer install" is faster.
    - $HOME/.composer/cache/files
    # Cache the directory where Symfony stores its slightly modified version of PHPUnit.
    - ./bin/.phpunit
    # Cache the Symfony binary's directory so that it does not have to be reinstalled.
    - $HOME/.symfony

env:
  global:
    - SYMFONY_PHPUNIT_DIR=./bin/.phpunit
    - SYMFONY_DEPRECATIONS_HELPER=29
    - ACTION="install"
    # Add the Symfony binary's path to PATH.
    - PATH="$HOME/.symfony/bin:$PATH"

matrix:
  fast_finish: true
  include:
    # Run tests with the dependencies from composer.lock
    - php: 7.2
    - php: 7.3
    - php: 7.4
    - php: 7.3
      env: SYMFONY="4.4.*"
           ACTION="update"
    - php: 7.3
      env: SYMFONY="5.0.*"
           ACTION="update"
  allow_failures:
    - php: 7.4
    - php: 7.3
      env: SYMFONY="4.4.*"
           ACTION="update"
    - php: 7.3
      env: SYMFONY="5.0.*"
           ACTION="update"

before_install:
  - phpenv config-rm xdebug.ini || true
  - composer self-update
  # Set memory to max (memory fail)
  - '[[ "$ACTION" == "install" ]] || echo "memory_limit=-1" >> ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/travis.ini'
  # Set stability to dev to allow 4.4dev and 5.0dev
  - '[[ "$ACTION" == "install" ]] || composer config minimum-stability dev'
  # Change version of symfony when need
  - '[[ "$ACTION" == "install" ]] || composer config extra.symfony.require $SYMFONY'

install:
  - php -r "echo ini_get('memory_limit').PHP_EOL;"
  # Install or update Composer packages including dev dependencies listed in require-dev.
  - COMPOSER_MEMORY_LIMIT=-1 composer $ACTION
  - ./bin/phpunit install

script:
  - ./bin/phpunit
  # this checks that the source code follows the Symfony Code Syntax rules
  - '[[ "$TRAVIS_PHP_VERSION" != "7.4" ]] || ./vendor/bin/php-cs-fixer fix --diff --dry-run -v'
  # this checks that the YAML config files contain no syntax errors
  - ./bin/console lint:yaml config --parse-tags
  # this checks that the Twig template files contain no syntax errors
  - ./bin/console lint:twig templates --env=prod
  # this checks that the XLIFF translations contain no syntax errors
  - ./bin/console lint:xliff translations
  # this checks that the application doesn't use dependencies with known security vulnerabilities
  - symfony check:security
  # this checks that Doctrine's mapping configurations are valid
  - ./bin/console doctrine:schema:validate --skip-sync -vvv --no-interaction
  #  Fail CI if the repo is in a dirty state after building assets (only for current release ie install)
  -  if [[ "$ACTION" == "install" ]]; then yarn install && yarn encore production && git add --all && git diff --staged --exit-code; fi
